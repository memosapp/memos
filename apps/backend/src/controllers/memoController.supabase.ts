import { Request, Response } from "express";
import { supabase, supabaseAdmin } from "../config/supabase";
import { formatTags, parseTags } from "../utils/tagUtils";
import {
  AuthorRole,
  Memo,
  CreateMemoRequest,
  UpdateMemoRequest,
} from "../types";

/**
 * Create a new memo using Supabase
 * Automatic embedding generation happens via database triggers
 */
export const createMemo = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    // Get userId from authenticated user (set by auth middleware)
    const userId = req.user?.id;

    if (!userId) {
      res.status(401).json({ error: "Authentication required" });
      return;
    }

    const {
      sessionId,
      content,
      summary,
      authorRole,
      importance = 1.0,
      tags,
      appName,
    }: Omit<CreateMemoRequest, "userId"> = req.body;

    // Validate required fields
    if (!content || !authorRole) {
      res.status(400).json({ error: "Missing required fields" });
      return;
    }

    // Validate authorRole
    if (!Object.values(AuthorRole).includes(authorRole)) {
      res.status(400).json({ error: "Invalid author role" });
      return;
    }

    // Insert memo into Supabase
    // Note: embedding will be automatically generated by triggers
    const { data, error } = await supabaseAdmin
      .from("memos")
      .insert({
        session_id: sessionId || null,
        user_id: userId,
        content,
        summary: summary || null,
        author_role: authorRole,
        importance,
        tags: formatTags(tags),
        app_name: appName || null,
        // embedding will be generated automatically
      })
      .select()
      .single();

    if (error) {
      console.error("Supabase insert error:", error);
      res.status(500).json({ error: "Failed to create memo" });
      return;
    }

    // Convert response to our Memo type
    const memo: Memo = {
      id: data.id,
      sessionId: data.session_id,
      userId: data.user_id,
      content: data.content,
      summary: data.summary,
      authorRole: data.author_role as AuthorRole,
      importance: data.importance,
      accessCount: data.access_count,
      tags: parseTags(data.tags),
      appName: data.app_name,
      createdAt: data.created_at,
      updatedAt: data.updated_at,
      lastAccessedAt: data.last_accessed_at,
    };

    console.log(`Created memo ${memo.id} for user ${userId}`);
    res.status(201).json(memo);
  } catch (error) {
    console.error("Error creating memo:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};

/**
 * Get memos for the authenticated user
 */
export const getMemos = async (req: Request, res: Response): Promise<void> => {
  try {
    const userId = req.user?.id;

    if (!userId) {
      res.status(401).json({ error: "Authentication required" });
      return;
    }

    const {
      sessionId,
      limit = 50,
      offset = 0,
      tags,
      authorRole,
      minImportance,
      maxImportance,
    } = req.query;

    // Build query
    let query = supabaseAdmin
      .from("memos")
      .select("*")
      .eq("user_id", userId)
      .order("updated_at", { ascending: false });

    // Apply filters
    if (sessionId) {
      query = query.eq("session_id", sessionId);
    }

    if (authorRole) {
      query = query.eq("author_role", authorRole);
    }

    if (minImportance) {
      query = query.gte("importance", Number(minImportance));
    }

    if (maxImportance) {
      query = query.lte("importance", Number(maxImportance));
    }

    if (tags && Array.isArray(tags)) {
      // Filter by tags (contains any of the specified tags)
      query = query.overlaps("tags", tags);
    }

    // Apply pagination
    query = query.range(Number(offset), Number(offset) + Number(limit) - 1);

    const { data, error } = await query;

    if (error) {
      console.error("Supabase query error:", error);
      res.status(500).json({ error: "Failed to fetch memos" });
      return;
    }

    // Convert to our Memo type
    const memos: Memo[] = data.map((row) => ({
      id: row.id,
      sessionId: row.session_id,
      userId: row.user_id,
      content: row.content,
      summary: row.summary,
      authorRole: row.author_role as AuthorRole,
      importance: row.importance,
      accessCount: row.access_count,
      tags: parseTags(row.tags),
      appName: row.app_name,
      createdAt: row.created_at,
      updatedAt: row.updated_at,
      lastAccessedAt: row.last_accessed_at,
    }));

    res.json(memos);
  } catch (error) {
    console.error("Error fetching memos:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};

/**
 * Get a single memo by ID
 */
export const getMemo = async (req: Request, res: Response): Promise<void> => {
  try {
    const userId = req.user?.id;
    const { id } = req.params;

    if (!userId) {
      res.status(401).json({ error: "Authentication required" });
      return;
    }

    if (!id || isNaN(Number(id))) {
      res.status(400).json({ error: "Invalid memo ID" });
      return;
    }

    // Get memo and increment access count
    const { data, error } = await supabaseAdmin
      .from("memos")
      .select("*")
      .eq("id", id)
      .eq("user_id", userId)
      .single();

    if (error) {
      if (error.code === "PGRST116") {
        res.status(404).json({ error: "Memo not found" });
        return;
      }
      console.error("Supabase query error:", error);
      res.status(500).json({ error: "Failed to fetch memo" });
      return;
    }

    // Update access count and last accessed time
    await supabaseAdmin
      .from("memos")
      .update({
        access_count: data.access_count + 1,
        last_accessed_at: new Date().toISOString(),
      })
      .eq("id", id);

    // Convert to our Memo type
    const memo: Memo = {
      id: data.id,
      sessionId: data.session_id,
      userId: data.user_id,
      content: data.content,
      summary: data.summary,
      authorRole: data.author_role as AuthorRole,
      importance: data.importance,
      accessCount: data.access_count + 1, // Return updated count
      tags: parseTags(data.tags),
      appName: data.app_name,
      createdAt: data.created_at,
      updatedAt: data.updated_at,
      lastAccessedAt: new Date(), // Return updated time
    };

    res.json(memo);
  } catch (error) {
    console.error("Error fetching memo:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};

/**
 * Search memos using Supabase RPC function
 */
export const searchMemos = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const userId = req.user?.id;

    if (!userId) {
      res.status(401).json({ error: "Authentication required" });
      return;
    }

    const {
      query,
      limit = 10,
      sessionId,
      similarity_threshold = 0.7,
    } = req.body;

    if (!query) {
      res.status(400).json({ error: "Search query is required" });
      return;
    }

    // Use the search function we created in the migration
    const { data, error } = await supabaseAdmin.rpc("search_memos", {
      query_text: query,
      user_id_param: userId,
      similarity_threshold: Number(similarity_threshold),
      limit_param: Number(limit),
    });

    if (error) {
      console.error("Supabase search error:", error);
      res.status(500).json({ error: "Search failed" });
      return;
    }

    res.json(data || []);
  } catch (error) {
    console.error("Error searching memos:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};

/**
 * Update a memo
 */
export const updateMemo = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const userId = req.user?.id;
    const { id } = req.params;
    const updates: UpdateMemoRequest = req.body;

    if (!userId) {
      res.status(401).json({ error: "Authentication required" });
      return;
    }

    if (!id || isNaN(Number(id))) {
      res.status(400).json({ error: "Invalid memo ID" });
      return;
    }

    // Check if memo exists and belongs to user
    const { data: existingMemo, error: checkError } = await supabaseAdmin
      .from("memos")
      .select("id")
      .eq("id", id)
      .eq("user_id", userId)
      .single();

    if (checkError || !existingMemo) {
      res.status(404).json({ error: "Memo not found" });
      return;
    }

    // Build update object
    const updateData: any = {};

    if (updates.sessionId !== undefined) {
      updateData.session_id = updates.sessionId;
    }

    if (updates.content !== undefined) {
      updateData.content = updates.content;
      // Embedding will be regenerated automatically by triggers
    }

    if (updates.summary !== undefined) {
      updateData.summary = updates.summary;
    }

    if (updates.authorRole !== undefined) {
      if (!Object.values(AuthorRole).includes(updates.authorRole)) {
        res.status(400).json({ error: "Invalid author role" });
        return;
      }
      updateData.author_role = updates.authorRole;
    }

    if (updates.importance !== undefined) {
      updateData.importance = updates.importance;
    }

    if (updates.tags !== undefined) {
      updateData.tags = formatTags(updates.tags);
    }

    if (updates.appName !== undefined) {
      updateData.app_name = updates.appName;
    }

    // Perform update
    const { data, error } = await supabaseAdmin
      .from("memos")
      .update(updateData)
      .eq("id", id)
      .select()
      .single();

    if (error) {
      console.error("Supabase update error:", error);
      res.status(500).json({ error: "Failed to update memo" });
      return;
    }

    // Convert to our Memo type
    const memo: Memo = {
      id: data.id,
      sessionId: data.session_id,
      userId: data.user_id,
      content: data.content,
      summary: data.summary,
      authorRole: data.author_role as AuthorRole,
      importance: data.importance,
      accessCount: data.access_count,
      tags: parseTags(data.tags),
      appName: data.app_name,
      createdAt: data.created_at,
      updatedAt: data.updated_at,
      lastAccessedAt: data.last_accessed_at,
    };

    res.json(memo);
  } catch (error) {
    console.error("Error updating memo:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};

/**
 * Delete a memo
 */
export const deleteMemo = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const userId = req.user?.id;
    const { id } = req.params;

    if (!userId) {
      res.status(401).json({ error: "Authentication required" });
      return;
    }

    if (!id || isNaN(Number(id))) {
      res.status(400).json({ error: "Invalid memo ID" });
      return;
    }

    // Delete memo (RLS will ensure user can only delete their own)
    const { error } = await supabaseAdmin
      .from("memos")
      .delete()
      .eq("id", id)
      .eq("user_id", userId);

    if (error) {
      console.error("Supabase delete error:", error);
      res.status(500).json({ error: "Failed to delete memo" });
      return;
    }

    res.status(204).send();
  } catch (error) {
    console.error("Error deleting memo:", error);
    res.status(500).json({ error: "Internal server error" });
  }
};
